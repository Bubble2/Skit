extends ../index
block main
	div.doc-header
		h2 简介
	div.doc-con
		div.doc-param
			h3 基于SASS
			p 
				code.nohighlight.code-inline SKit
				|的目标是提供一套规范而可配置的
				code.nohighlight.code-inline sass kit
				|。
			p 
				|您可以在
				a(href="https://github.com/shijinyu/sui") github
				|上找到我。
			ul
				li SKit提供一套类似BEM的class样式命名规范。
				li SKit的所有样式组件都是可更改、可添加、可卸载的。
				li SKit提供可配置预设的变量，您可以根据需求自行修改字体、字号、配色。
			blockquote 这套sass框架的react、angularjs版本正在开发，在此之前，它是一个纯粹的样式框架，而不会包含任何js功能和代码，您可以根据您的需要去添加。
			div.doc-param
				h3 样式架构与耦合
				p.at-mb-small.
					SKit推荐页面重构上实行宏观结构(macro)和微观结构(micro)两个方面的划分：宏观结构负责定义页面整体的划分、排版、位置，作为页面的骨架；微观则是将特定样式、功能封装在一起的组件。
				p.at-mb-small.
					宏观架构，最大的是页面碎片(<code class="nohighlight code-inline">include</code>)，用于划分页面结构，是撑起整个页面的“骨架”。属于页面碎片的样式都以<code class="nohighlight code-inline">inc-</code>前缀。它常常与栅格(<code class="nohighlight code-inline">grid</code>)结合使用。
				p.at-mb-small.
					在<code class="nohighlight code-inline">include</code>之下，是布局(<code class="nohighlight code-inline">layout</code>)架构，属于布局的样式都以<code class="nohighlight code-inline">ly-</code>前缀。特定布局中，可能会规定其所包含的组件的样式，如外边距、定位甚至宽度、高度等。SKit只规定了表单、模态弹窗、标题-内容盒子等常见的集中布局，您可以根据实际情况增删。
				p.at-mb-small.
					微观架构，以“组件”(<code class="nohighlight code-inline">module</code>)为主，组件内部是耦合度十分紧密的，同时也用来实现特定的功能，应视为一个整体，不可再分。组件是可复用的，为了适应各种场景，SKit已有的组件都尽可能地规定了辅助样式，比如尺寸规格、颜色等。从布局方面说，组件是“上下文无关”的，即组件一般不会规定自身的外边距、定位，它可以在特定上下文中结合原子样式或宏观布局来规定这些。从功能上说，组件的功能可以根据任何你需要的方式实现，如基于<code class="nohighlight code-inline">jQuery</code>编写，甚至在服务器端定义。SKit准备使用<code class="nohighlight code-inline">React.js</code>来实现这些功能。
				p.at-mb-small.
					如果您的需求实在复杂，可以在组件的基础上编写复合组件，即可以进一步解耦的组件。SKit目前没有复合组件。
				p.at-mb-small.
					粒度最细的则是<code class="nohighlight code-inline">ui</code>，按钮、图标、标签等都属于<code class="nohighlight code-inline">ui</code>。它结构简单，只规定了特定标签的样式，也往往不能进一步解耦。
				p.at-mb-small.
					SKit也引入了一套原子样式(<code class="nohighlight code-inline">atom</code>)，它是简单的常用样式集，相当于宏观布局与微观组件之间的“润滑剂”。但它只是整个布局的补充，不可滥用。
			div.doc-param
				h3 目录结构及文件介绍
				ul
					li
						code.nohighlight.code-inline fonts
						|存放字体图标文件。在后面的阶段，SKit将考虑使用
						code.nohighlight.code-inline svg icon
						|。
					li
						code.nohighlight.code-inline sass
						|存放sass文件的目录，其链接的字体图标、图片等目录默认与之同级，您可以在
						code.nohighlight.code-inline variables
						|上修改相对路径和文件名。
					li
						code.nohighlight.code-inline sass/core
						|核心配置文件存放目录，强烈建议您在编写组件及引入组件的时候引入
						code.nohighlight.code-inline _mixin.scss
						code.nohighlight.code-inline _variables.scss
						code.nohighlight.code-inline _functions.scss
						|三个文件。它们也是整个kit的基础。
					li
						code.nohighlight.code-inline sass/font_icons
						|字体图标样式存放文件。它从
						code.nohighlight.code-inline font-awesome
						|变更而来，您可以方便地配置和管理字体图标。
					li
						code.nohighlight.code-inline sass/ui
						|存放视觉样式，包括按钮、表单元素、像素图标、提示信息等。
					li
						code.nohighlight.code-inline sass/module
						|存放模块样式。Skit中，模块可能依赖视觉等更细粒度样式，可复用并结合JS提供一些可复用的功能。
						p
							|SKit中所有的模块都是可选的，不需要的模块可以不引入，以免冗余代码。Skit本身只提供有限的几个模块，实际应用时可根据需求增删。
					li
						code.nohighlight.code-inline sass/layout
						|存放结构样式。Skit中，结构作为一种可作为若干模块或更细粒度结构的“容器”，因此使用或维护这些结构时，请注意耦合。
						p
							|Skit本身只提供有限的几个容器，包括模态弹窗、窗体，表单框架等，实际应用时可根据需求增删。
					li
						code.nohighlight.code-inline sass/include
						|存放更为“宏观”，与业务关系更加紧密的结构，Skit中称为“页面碎片”，它往往是页面的一部分，如侧边栏、顶部栏、底部栏等。
						p
							|Skit默认所包含页面碎片仅作为示例，Skit规范推荐的方法是：将项目中实际的页面结构拆成若干页面碎片，再被页面样式文件
							|引用。
					li
						code.nohighlight.code-inline sass
						|根目录存放页面级别的样式文件。所有需要的文件都应该最终在这里被顺序引用。
						p
							|Skit规范推荐页面以
							code.nohighlight.code-inline pg
							|为前缀。